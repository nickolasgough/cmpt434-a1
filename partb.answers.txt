Nickolas Gough, nvg081, 11181823


### Part B


Total delay = td
Propagation delay = pd
Link distance = ld
Speed of signal propagation = sp
Link data rate = dr
Queueing delay = qd
Node processing delay = nd
Data size = ds

Percent of propagation delay = ppd

Symbol rate (baud) = bd
Number of states = v
log = log2

Number of sessions = s
Achievable data rate = achdr
Duration of busy session = db
Average number of busy sessions = avgbs
Average data rate = avgdr

Achievable data transfer rate = adr


### 1

    pd = ld / sp

    td = pd + (ds / dr) + x + (5.00*(10^-10s/b) * ds)

    ppd = (pd / td) * 100

OCN: x = 0.00s, ld = 0.005m

    pd = 0.005m / 200*(10^6m)/s = 2.50*(10^-11)s

    td = 2.50*(10^-11)s + (800b / 4.00*(10^9)b/s) + 0.00s + (5.00*(10^-10s/b) * 800b)

    td = 2.50*(10^-11)s + 2.00*(10^-7)s + 4.00*(10^-7)s

    td = 6.00*(10^-7)s

    ppd = (2.50*(10^-11)s / 6.00*(10^-7)s) * 100 

    ppd = 4.17*(10^-3)%

SAN: x = 3.00*(10^-7)s, ld = 5.00m

    pd = 5.00m / 200*(10^6m)/s = 2.50*(10^-8)s

    td = 2.50*(10^-8)s + (800b / 4.00*(10^9)b/s) + 3.00*(10^-7)s + (5.00*(10^-10s/b) * 800b)

    td = 2.50*(10^-8)s + 2.00*(10^-7)s + 3.00*(10^-7)s + 4.00*(10^-7)s

    td = 9.25*(10^-7)s

    ppd = (2.50*(10^-8)s / 9.25*(10^-7)s) * 100

    ppd = 2.70%

LAN: x = 3.00*(10^-6)s, ld = 5.00*(10^3)m

    pd = (5.00*(10^3)m) / 200*(10^6m)/s = 2.50*(10^-5)s

    td = 2.50*(10^-5)s + (800b / 4.00*(10^9)b/s) + 3.00*(10^-6)s + (5.00*(10^-10s/b) * 800b)

    td = 2.50*(10^-5)s + 2.00*(10^-7)s + 3.00*(10^-6)s + 4.00*(10^-7)s

    td = 2.86*(10^-5)s

    ppd = (2.50*(10^-5)s / 2.86*(10^-5)s) * 100

    ppd = 87.4%

WAN: x = 3.00*(10^-5)s, ld = 5.00*(10^6)m

    pd = 5.00*(10^6)m / 200*(10^6m)/s = 2.50*(10^-2)s

    td = 2.50*(10^-2)s + (800b / 4.00*(10^9)b/s) + 3.00*(10^-5)s + (5.00*(10^-10s/b) * 800b)

    td = 2.50*(10^-2)s + 2.00*(10^-7)s + 3.00*(10^-5)s + 4.00*(10^-7)s

    td = 2.50*(10^-2)s

    ppd = (2.50*(10^-2)s / 2.50*(10^-2)s) * 100

    ppd = 100%


### 2

    let z = pd + (ds / dr)

    z = 1.00*(10^-3)s + (8000b / 100*(10^6)b/s)

    z = 1.08*(10^-3)s

    td = (4 * z) + ((n - 1) * z)

a: n = 1

    td = (4 * 1.08*(10^-3)s) + ((1 - 1) * 1.08*(10^-3)s)

    td = 4 * 1.08*(10^-3)s

    td = 4.32*(10^-3)s

b: n = 12

    td = (4 * 1.08*(10^-3)s) + ((12 - 1) * 1.08*(10^-3)s)

    td = 4.32*(10^-3)s + 1.19*(10^-2)s

    td = 1.62*(10^-2)s


### 3

v = 2^b
bd = 2 * H
dr = b * bd

Shannon's Theorem =>

    dr = H * log(1 + S/N)

    dr = 400*(10^3)Hz * log(1 + 63)

    dr = 400*(10^3)Hz * 6

    dr = 2.40*(10^6)b/s

a: v = 2

    Nyquist's Theorem =>

        2 = 2^b

        b = 1

        bd = 2 * 400*(10^3)Hz

        bd = 800*(10^3)Hz

        dr = 1 * (800*(10^3)Hz)

        dr = 800*(10^3)b/s < 2.40*(10^6)b/s

    Thus, the maximum data rate is 800*(10^3)b/s = 800Kb/s

b: v = 32

    Nyquist's Theorem =>

        32 = 2^b

        b = 5

        bd = 2 * 400*(10^3)Hz

        bd = 800*(10^3)Hz

        dr = 5 * (800*(10^3)Hz)

        dr = 4.00*(10^6)b/s > 2.40*(10^6)b/s

    Thus, the maximum data rate is 2.40*(10^6)b/s = 2.40*(10^3)Kb/s

### 4

a:
    achdr = dr / s

    achdr = (100*(10^6)b/s) / 100

    achdr = 1.00*(10^6)b/s

b:

avgdr = dr / (1 + (99 * (db / (1s + db))))

db = 10s

    avgdr = (100*(10^6)b/s) / (1 + (99 * (10s / (1s + 10s))))

    avgdr = (100*(10^6)b/s) / 91

    avgdr = 1.10*(10^6)b/s

db = 1s

    avgdr = (100*(10^6)b/s) / (1 + (99 * (1s / (1s + 1s))))

    avgdr = (100*(10^6)b/s) / 50.5

    avgdr = 1.98*(10^6)b/s

db = 0.1s

    avgdr = (100*(10^6)b/s) / (1 + (99 * (0.1s / (1s + 0.1s))))

    avgdr = (100*(10^6)b/s) / 9.18

    avgdr = 10.9*(10^9)b/s

db = 0.01s

    avgdr = (100*(10^6)b/s) / (1 + (99 * (0.01s / (1s + 0.01s))))

    avgdr = (100*(10^6)b/s) / 1.89

    avgdr = 52.9*(10^6)b/s


### 5

a: stop-and-wait

    adr = ds / RTT

    adr = 8000b / 0.1s

    adr = 80*(10^3)b/s = 0.08Mb/s

b: sliding window

  adr = (n * ds) / RTT

  n = 10

    adr = (10 * ds) / RTT

    adr = (10 * 8000b) / 0.1s

    adr = 800*(10^3)b/s = 0.8Mb/s

  n = 1000

    adr = (1000 * ds) / RTT

    adr = (1000 * 8000b) / 0.1s

    adr = 80*(10^6)b/s = 80Mb/s

c:

  adr = (n * ds) / RTT

    100*(10^6)b/s = (n * 8000b) / 0.1s

    n = (0.1s * 100*(10^6)b/s) / 8000b

    n = 1250

d:

    1. Parallel computing would require the window size to be increased to
       enable splitting the data over multiple streams without overlap and
       reach the maxmimum transfer rate. For example, MIMO would benefit from
       a larger window size to allow both streams to reach the maximum transfer
       rate.
    2. A larger window size would be beneficial if the error or loss rate of
       of packet transmission is high. Increasing the window size enables the
       sender to continue sending new packets while resending previous packets
       without having to stop and wait for acknowledgements that the data was
       received correctly.
